     1                                  ;
     2                                  ; file: asm_main.asm
     3                                  
     4                                  %include "asm_io.inc"
     5                              <1> 	extern  read_int, print_int, print_string
     6                              <1> 	extern	read_char, print_char, print_nl
     7                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     8                              <1> 
     9                              <1> %macro 	dump_regs 1
    10                              <1> 	push	  dword %1
    11                              <1> 	call	  sub_dump_regs
    12                              <1> %endmacro
    13                              <1> 
    14                              <1> 
    15                              <1> ;
    16                              <1> ; usage: dump_mem label, start-address, # paragraphs
    17                              <1> %macro  dump_mem 3
    18                              <1> 	push	 dword %1
    19                              <1> 	push	 dword %2
    20                              <1> 	push	 dword %3
    21                              <1> 	call	 sub_dump_mem
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro	dump_math 1
    25                              <1> 	push	 dword %1
    26                              <1> 	call	 sub_dump_math
    27                              <1> %endmacro
    28                              <1> 
    29                              <1> %macro  dump_stack 3
    30                              <1> 	push	 dword %3
    31                              <1>         push     dword %2
    32                              <1> 	push	 dword %1
    33                              <1>         call     sub_dump_stack
    34                              <1> %endmacro
    35                                  ;
    36                                  ; initialized data is put in the .data segment
    37                                  ;
    38                                  %define  SIZE 10
    39                                  segment .data
    40                                  ; next print out result message as series of steps
    41                                  
    42 00000000 54686520696E742076-     format_string:    db "The int value is: %d",10,"The double value is %f",10,0
    43 00000009 616C75652069733A20-
    44 00000012 25640A54686520646F-
    45 0000001B 75626C652076616C75-
    46 00000024 652069732025660A00 
    47                                  					; format string for printf
    48 0000002D 9A99999999D93740        number:  dq 23.85
    49                                  ; uninitialized data is put in the .bss segment
    50                                  ;
    51                                  segment .bss
    52                                  
    53                                  ;
    54                                  ; code is put in the .text segment
    55                                  ;
    56                                  segment .text
    57                                          global  asm_main
    58                                  		extern  printf
    59                                  asm_main:
    60 00000000 C8000000                        enter   0,0               ; setup routine
    61 00000004 60                              pusha
    62                                          
    63 00000005 FF35[31000000]                  push    dword [number + 4]
    64 0000000B FF35[2D000000]                  push    dword [number]
    65 00000011 6A2A                            push    dword 42
    66 00000013 68[00000000]                    push    dword format_string		; address of format string
    67 00000018 E8(00000000)                    call    printf			; Call C function
    68 0000001D 83C410                          add     esp, 16			; pop stack 
    69 00000020 61                              popa
    70 00000021 B800000000                      mov     eax, 0            ; return back to C
    71 00000026 C9                              leave                     
    72 00000027 C3                              ret
    73                                  
    74                                  
