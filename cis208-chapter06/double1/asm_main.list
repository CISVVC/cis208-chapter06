     1                                  ;
     2                                  ; file: asm_main.asm
     3                                  
     4                                  %include "asm_io.inc"
     5                              <1> 	extern  read_int, print_int, print_string
     6                              <1> 	extern	read_char, print_char, print_nl
     7                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     8                              <1> 
     9                              <1> %macro 	dump_regs 1
    10                              <1> 	push	  dword %1
    11                              <1> 	call	  sub_dump_regs
    12                              <1> %endmacro
    13                              <1> 
    14                              <1> 
    15                              <1> ;
    16                              <1> ; usage: dump_mem label, start-address, # paragraphs
    17                              <1> %macro  dump_mem 3
    18                              <1> 	push	 dword %1
    19                              <1> 	push	 dword %2
    20                              <1> 	push	 dword %3
    21                              <1> 	call	 sub_dump_mem
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro	dump_math 1
    25                              <1> 	push	 dword %1
    26                              <1> 	call	 sub_dump_math
    27                              <1> %endmacro
    28                              <1> 
    29                              <1> %macro  dump_stack 3
    30                              <1> 	push	 dword %3
    31                              <1>         push     dword %2
    32                              <1> 	push	 dword %1
    33                              <1>         call     sub_dump_stack
    34                              <1> %endmacro
    35                                  ;
    36                                  ; initialized data is put in the .data segment
    37                                  ;
    38                                  %define  SIZE 10
    39                                  segment .data
    40                                  ; next print out result message as series of steps
    41 00000000 25652025450A00          msg:    db "%e %E",10,0
    42                                  					; format string for printf
    43 00000007 BB16D80E                flt1:	dd	5.327e-30		; 32-bit floating point
    44 0000000B 6ED768D3250BA7FE        flt2:	dq	-123.456789e300	        ; 64-bit floating point
    45                                  ; uninitialized data is put in the .bss segment
    46                                  ;
    47                                  segment .bss
    48 00000000 <res 00000008>          flttmp:	resq 1			        ; 64-bit temporary for printing flt1
    49                                  
    50                                  ;
    51                                  ; code is put in the .text segment
    52                                  ;
    53                                  segment .text
    54                                          global  asm_main
    55                                  		extern  printf
    56                                  asm_main:
    57 00000000 C8000000                        enter   0,0               ; setup routine
    58 00000004 60                              pusha
    59                                  
    60 00000005 D905[07000000]          		fld	dword [flt1]	        ; need to convert 32-bit to 64-bit
    61 0000000B DD1D[00000000]          		fstp	qword [flttmp]          ; floating load makes 80-bit,
    62                                  										; store as 64-bit
    63                                  										; push last argument first
    64 00000011 FF35[0F000000]          		push	dword [flt2+4]	        ; 64 bit floating point (bottom)
    65 00000017 FF35[0B000000]          		push	dword [flt2]	        ; 64 bit floating point (top)
    66 0000001D FF35[04000000]          		push	dword [flttmp+4]        ; 64 bit floating point (bottom)
    67 00000023 FF35[00000000]          		push	dword [flttmp]	        ; 64 bit floating point (top)
    68 00000029 68[00000000]                    push    dword msg		; address of format string
    69 0000002E E8(00000000)                    call    printf			; Call C function
    70 00000033 83C414                          add     esp, 20			; pop stack 5*4 bytes
    71 00000036 61                              popa
    72 00000037 B800000000                      mov     eax, 0            ; return back to C
    73 0000003C C9                              leave                     
    74 0000003D C3                              ret
    75                                  
    76                                  
