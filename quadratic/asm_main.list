     1                                  
     2                                  
     3                                  ;
     4                                  ; file: quad.asm
     5                                  
     6                                  ; function quadratic
     7                                  ; finds solutions to the quadratic equation: 
     8                                  ;       a*x^2 + b*x + c = 0
     9                                  ; C prototype:
    10                                  ;   int quadratic( double a, double b, double c,
    11                                  ;                  double * root1, double *root2 )
    12                                  ; Parameters:
    13                                  ;   a, b, c - coefficients of powers of quadratic equation (see above)
    14                                  ;   root1   - pointer to double to store first root in
    15                                  ;   root2   - pointer to double to store second root in
    16                                  ; Return value:
    17                                  ;   returns 1 if real roots found, else 0
    18                                  
    19                                  %define a               qword [ebp+8]
    20                                  %define b               qword [ebp+16]
    21                                  %define c               qword [ebp+24]
    22                                  %define root1           dword [ebp+32]
    23                                  %define root2           dword [ebp+36]
    24                                  %define disc            qword [ebp-8]
    25                                  %define one_over_2a     qword [ebp-16]
    26                                  
    27                                  segment .data
    28 00000000 FCFF                    MinusFour       dw      -4
    29                                  
    30                                  segment .bss
    31                                  
    32                                   
    33                                  
    34                                  segment .text
    35                                          global  quadratic
    36                                  quadratic:
    37 00000000 55                              push    ebp
    38 00000001 89E5                            mov     ebp, esp
    39 00000003 83EC10                          sub     esp, 16         ; allocate 2 doubles (disc & one_over_2a)
    40 00000006 53                              push    ebx             ; must save original ebx
    41                                  
    42 00000007 DF05[00000000]                  fild    word [MinusFour]; stack -4
    43 0000000D DD4508                          fld     a               ; stack: a, -4
    44 00000010 DD4518                          fld     c               ; stack: c, a, -4
    45 00000013 DEC9                            fmulp   st1             ; stack: a*c, -4
    46 00000015 DEC9                            fmulp   st1             ; stack: -4*a*c
    47 00000017 DD4510                          fld     b
    48 0000001A DD4510                          fld     b               ; stack: b, b, -4*a*c
    49 0000001D DEC9                            fmulp   st1             ; stack: b*b, -4*a*c
    50 0000001F DEC1                            faddp   st1             ; stack: b*b - 4*a*c
    51 00000021 D9E4                            ftst                    ; test with 0
    52 00000023 9BDFE0                          fstsw   ax
    53 00000026 9E                              sahf
    54 00000027 7239                            jb      no_real_solutions ; if disc < 0, no real solutions
    55 00000029 D9FA                            fsqrt                   ; stack: sqrt(b*b - 4*a*c)
    56 0000002B DD5DF8                          fstp    disc            ; store and pop stack
    57 0000002E D9E8                            fld1                    ; stack: 1.0
    58 00000030 DD4508                          fld     a               ; stack: a, 1.0
    59 00000033 D9FD                            fscale                  ; stack: a * 2^(1.0) = 2*a, 1
    60 00000035 DEF9                            fdivp   st1             ; stack: 1/(2*a)
    61 00000037 DD55F0                          fst     one_over_2a     ; stack: 1/(2*a)
    62 0000003A DD4510                          fld     b               ; stack: b, 1/(2*a)
    63 0000003D DD45F8                          fld     disc            ; stack: disc, b, 1/(2*a)
    64 00000040 DEE1                            fsubrp  st1             ; stack: disc - b, 1/(2*a)
    65 00000042 DEC9                            fmulp   st1             ; stack: (-b + disc)/(2*a)
    66 00000044 8B5D20                          mov     ebx, root1
    67 00000047 DD1B                            fstp    qword [ebx]     ; store in *root1
    68 00000049 DD4510                          fld     b               ; stack: b
    69 0000004C DD45F8                          fld     disc            ; stack: disc, b
    70 0000004F D9E0                            fchs                    ; stack: -disc, b
    71 00000051 DEE1                            fsubrp  st1             ; stack: -disc - b
    72 00000053 DC4DF0                          fmul    one_over_2a     ; stack: (-b - disc)/(2*a)
    73 00000056 8B5D24                          mov     ebx, root2
    74 00000059 DD1B                            fstp    qword [ebx]     ; store in *root2
    75 0000005B B801000000                      mov     eax, 1          ; return value is 1
    76 00000060 EB07                            jmp     short quit
    77                                  
    78                                  no_real_solutions:
    79 00000062 DDC0                            ffree   st0             ; dump disc off stack
    80 00000064 B800000000                      mov     eax, 0          ; return value is 0
    81                                  
    82                                  quit:
    83 00000069 5B                              pop     ebx
    84 0000006A 89EC                            mov     esp, ebp
    85 0000006C 5D                              pop     ebp
    86 0000006D C3                              ret
    87                                  
